// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientMessage struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_fa60935d0b6bdb08, []int{0}
}
func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage.Unmarshal(m, b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
}
func (dst *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(dst, src)
}
func (m *ClientMessage) XXX_Size() int {
	return xxx_messageInfo_ClientMessage.Size(m)
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

func (m *ClientMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ServerMessage struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt            int64    `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMessage) Reset()         { *m = ServerMessage{} }
func (m *ServerMessage) String() string { return proto.CompactTextString(m) }
func (*ServerMessage) ProtoMessage()    {}
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_fa60935d0b6bdb08, []int{1}
}
func (m *ServerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMessage.Unmarshal(m, b)
}
func (m *ServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMessage.Marshal(b, m, deterministic)
}
func (dst *ServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMessage.Merge(dst, src)
}
func (m *ServerMessage) XXX_Size() int {
	return xxx_messageInfo_ServerMessage.Size(m)
}
func (m *ServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMessage proto.InternalMessageInfo

func (m *ServerMessage) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ServerMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ServerMessage) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*ClientMessage)(nil), "chat.ClientMessage")
	proto.RegisterType((*ServerMessage)(nil), "chat.ServerMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	MessageStream(ctx context.Context, opts ...grpc.CallOption) (Chat_MessageStreamClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) MessageStream(ctx context.Context, opts ...grpc.CallOption) (Chat_MessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/chat.Chat/MessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatMessageStreamClient{stream}
	return x, nil
}

type Chat_MessageStreamClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type chatMessageStreamClient struct {
	grpc.ClientStream
}

func (x *chatMessageStreamClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatMessageStreamClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	MessageStream(Chat_MessageStreamServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_MessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).MessageStream(&chatMessageStreamServer{stream})
}

type Chat_MessageStreamServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type chatMessageStreamServer struct {
	grpc.ServerStream
}

func (x *chatMessageStreamServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatMessageStreamServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageStream",
			Handler:       _Chat_MessageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_chat_fa60935d0b6bdb08) }

var fileDescriptor_chat_fa60935d0b6bdb08 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x34, 0xb9, 0x78, 0x9d, 0x73,
	0x32, 0x53, 0xf3, 0x4a, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x73,
	0x21, 0x4c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x29, 0x85, 0x8b, 0x37, 0x38,
	0xb5, 0xa8, 0x2c, 0xb5, 0x08, 0xa6, 0x54, 0x8a, 0x8b, 0xa3, 0xb4, 0x38, 0xb5, 0x28, 0x2f, 0x31,
	0x17, 0xa6, 0x16, 0xce, 0x47, 0x36, 0x86, 0x09, 0xc5, 0x18, 0x21, 0x59, 0x2e, 0xae, 0xe4, 0xa2,
	0xd4, 0xc4, 0x92, 0xd4, 0x94, 0xf8, 0xc4, 0x12, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x4e,
	0xa8, 0x88, 0x63, 0x89, 0x91, 0x2b, 0x17, 0x8b, 0x73, 0x46, 0x62, 0x89, 0x90, 0x2d, 0x17, 0x2f,
	0xd4, 0x9e, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0x21, 0x61, 0x3d, 0xb0, 0xe3, 0x51, 0x5c, 0x2b,
	0x05, 0x15, 0x44, 0x71, 0x97, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x93, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x40, 0x56, 0xb4, 0xb4, 0xf2, 0x00, 0x00, 0x00,
}
